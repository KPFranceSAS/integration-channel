<?php

namespace App\Command\Channels\ChannelAdvisor;

use App\BusinessCentral\Connector\KpFranceConnector;
use App\Channels\ChannelAdvisor\ChannelAdvisorIntegrateOrder;
use App\Entity\AmazonOrder;
use Doctrine\Persistence\ManagerRegistry;
use Exception;
use stdClass;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;

#[\Symfony\Component\Console\Attribute\AsCommand('app:channel-integrate-partial', 'Integrate partial orders')]
class IntegratePartialCommand extends Command
{
    public function __construct(
        private readonly KpFranceConnector $bcConnector,
        private readonly ChannelAdvisorIntegrateOrder $channelAdvisorIntegrateOrder,
        ManagerRegistry $manager
    ) {
        /** @var \Doctrine\ORM\EntityManagerInterface */
        $this->manager = $manager->getManager();
        parent::__construct();
    }

    private $manager;



    protected function configure(): void
    {
        $this
            
            ->addArgument('orderNumber', InputArgument::REQUIRED);
    }

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $amzOrderId=$input->getArgument('orderNumber');

        $orderRecordeds = $this->manager->getRepository(AmazonOrder::class)->findBy(
            [
                'amazonOrderId' => $amzOrderId,
                'orderStatus' => 'Shipped',
                'itemStatus' => 'Shipped'
            ]
        );

        $orderApi = $this->recreateChannelObject($amzOrderId, $orderRecordeds);
        $this->channelAdvisorIntegrateOrder->integrateOrder($orderApi);
       
        
        return Command::SUCCESS;
    }




    private function matchSite(string $subAmazon): string
    {
        $mapCustomer = [
            "Amazon.co.uk" => "641", // Customer Amazon UK
            "Amazon.it" =>   "645", // Customer Amazon IT
            "Amazon.de" =>   "642", // Customer Amazon DE
            "Amazon.fr" =>   "643", // Customer Amazon FR
            "Amazon.es" =>   "683", // Customer Amazon ES
        ];
        if (array_key_exists($subAmazon, $mapCustomer)) {
            return $mapCustomer[$subAmazon];
        } else {
            throw new Exception('not found profile');
        }
    }


    private function matchProfile(string $subAmazon): string
    {
        $mapCustomer = [
            "Amazon.co.uk" => "12010024", // Customer Amazon UK
            "Amazon.it" =>   "12010025", // Customer Amazon IT
            "Amazon.de" =>   "12010023", // Customer Amazon DE
            "Amazon.fr" =>   "12009934", // Customer Amazon FR
            "Amazon.es" =>   "12010026", // Customer Amazon ES
        ];
        if (array_key_exists($subAmazon, $mapCustomer)) {
            return $mapCustomer[$subAmazon];
        } else {
           throw new Exception('not found profile');
        }
    }




    private function recreateChannelObject($amzOrderId, $orderRecordeds)
    {
        $orderApi = new stdClass();
        $orderApi->Items = [];
        
        $infoBase = $orderRecordeds[0];
        
        $orderApi->ProfileID = $this->matchProfile($infoBase->getSalesChannel());
        $orderApi->SiteID = $this->matchSite($infoBase->getSalesChannel());
        $orderApi->ID = $infoBase->getAmazonOrderId().'_'.$infoBase->getId();
        $orderApi->TotalPrice = 0;
        $orderApi->TotalShippingPrice = 0;
        $orderApi->SiteName = $infoBase->getSalesChannel();
        $orderApi->SiteOrderID = $infoBase->getAmazonOrderId();
        $orderApi->SecondarySiteOrderID = null;
        $orderApi->Currency = $infoBase->getCurrency();
        $orderApi->CreatedDateUtc = $this->retourFormatDate($infoBase->getPurchaseDate());

        $orderApi->TotalTaxPrice = 0;
        $orderApi->TotalShippingTaxPrice = 0;
        $orderApi->TotalInsurancePrice = 0;
        $orderApi->TotalGiftOptionPrice = 0;
        $orderApi->TotalGiftOptionTaxPrice = 0;
        $orderApi->AdditionalCostOrDiscount = 0;
        $orderApi->OrderTags = "AutoGeneratedSku,AmazonInvoice";
        $orderApi->DistributionCenterTypeRollup = "ExternallyManaged";
        $orderApi->CheckoutStatus = "Completed";
        $orderApi->PaymentStatus = "Cleared";
        $orderApi->ShippingStatus = "Shipped";
        $orderApi->CheckoutDateUtc = $this->retourFormatDate($infoBase->getPurchaseDate());
        $orderApi->PaymentDateUtc = $this->retourFormatDate($infoBase->getPurchaseDate());
        $orderApi->ShippingDateUtc = $this->retourFormatDate($infoBase->getPurchaseDate());
        $orderApi->BuyerEmailAddress = "--";
        $orderApi->BuyerEmailOptIn = false;
        $orderApi->OrderTaxType = "InclusiveVat";
        $orderApi->ShippingTaxType = "InclusiveVat";
        $orderApi->GiftOptionsTaxType = "InclusiveVat";
        $orderApi->PaymentMethod = "Amazon";
        $orderApi->ShippingTitle = null;
        $orderApi->ShippingFirstName = 'Retrieved';
        $orderApi->ShippingLastName = 'from historic';
        $orderApi->ShippingSuffix = null;
        $orderApi->ShippingCompanyName = null;
        $orderApi->ShippingCompanyJobTitle = null;
        $orderApi->ShippingDaytimePhone = null;
        $orderApi->ShippingEveningPhone = null;
        $orderApi->ShippingAddressLine1 = null;
        $orderApi->ShippingAddressLine2 = null;
        $orderApi->ShippingCity = $infoBase->getShipCity();
        $orderApi->ShippingStateOrProvince =  $infoBase->getShipState();
        $orderApi->ShippingStateOrProvinceName = $infoBase->getShipState();
        $orderApi->ShippingPostalCode = $infoBase->getShipPostalCode();
        $orderApi->ShippingCountry = $infoBase->getShipCountry();
        $orderApi->BillingTitle = null;
        $orderApi->BillingFirstName = 'Retrieved';
        $orderApi->BillingLastName = 'from historic';
        $orderApi->BillingSuffix = null;
        $orderApi->BillingCompanyName = null;
        $orderApi->BillingCompanyJobTitle = null;
        $orderApi->BillingDaytimePhone =  null;
        $orderApi->BillingEveningPhone =  null;
        $orderApi->BillingAddressLine1 = null;
        $orderApi->BillingAddressLine2 = null;
        $orderApi->BillingCity = $infoBase->getShipCity();
        $orderApi->BillingStateOrProvince =  $infoBase->getShipState();
        $orderApi->BillingStateOrProvinceName =  $infoBase->getShipState();
        $orderApi->BillingPostalCode = $infoBase->getShipPostalCode();
        $orderApi->BillingCountry = $infoBase->getShipCountry();
        $orderApi->PromotionCode = null;
        $orderApi->PromotionAmount = 0;

        foreach ($orderRecordeds as $orderRecord) {
            $line = new stdClass();
            $line->Sku = $orderRecord->getSku();
            $line->ReferenceSku = $orderRecord->getSku();

            $line->Title = $orderRecord->getProduct()->getDescription();
            $line->Quantity = $orderRecord->getQuantity();
            $line->UnitPrice = $orderRecord->getItemPriceCurrency();
            $line->TaxPrice = 0;
            $line->ShippingPrice = ($orderRecord->getShippingPriceCurrency()-$orderRecord->getShipPromotionDiscountCurrency());
            $line->ShippingTaxPrice = 0;
            $line->RecyclingFee = 0;
            $line->UnitEstimatedShippingCost = 0;
            $line->GiftPrice = 0;
            $line->GiftTaxPrice = 0;
            $line->Promotions = [];
            $orderApi->TotalPrice = $orderApi->TotalPrice + $line->ShippingPrice + $line->Quantity *  $line->UnitPrice;
            $orderApi->TotalShippingPrice = $orderApi->TotalShippingPrice + $line->ShippingPrice;
            $orderApi->Items[] = $line;
        }



        return $orderApi;
    }



    public function retourFormatDate(\DateTimeInterface $date)
    {
        if ($date) {
            return $date->format('Y-m-d') . 'T' . $date->format('H:i:s') . "Z";
        } else {
            return '';
        }
    }
}
